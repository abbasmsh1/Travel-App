// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  profileImage  String?   // URL to the profile image
  bio           String?   @db.Text
  location      String?
  phoneNumber   String?
  socialLinks   Json?
  preferences   Json?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  chatHistory   ChatHistory[]
  trips         Trip[]
}

enum UserRole {
  USER
  ADMIN
}

model Location {
  id            String    @id @default(cuid())
  name          String
  region        String
  country       String
  description   String    @db.Text
  imageUrl      String?
  climate       String?
  bestTimeToVisit String?
  type          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attractions   Attraction[]
  accommodations Accommodation[]
  transportations Transportation[]
}

model Attraction {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  imageUrl      String?
  price         Float
  duration      Int       // Duration in minutes
  location      Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String
  category      String    // e.g., "Historical", "Nature", "Adventure"
  rating        Float?
  openingHours  Json?     // Store opening hours for each day
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Accommodation {
  id            String    @id @default(cuid())
  name          String
  type          String    // e.g., "Hotel", "Hostel", "Resort"
  description   String    @db.Text
  imageUrl      String?
  pricePerNight Float
  location      Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String
  amenities     String[]
  rating        Float?
  contactInfo   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Transportation {
  id           String   @id @default(cuid())
  type         String
  description  String
  baseCost     Float
  availability Json?
  location     Location @relation(fields: [locationId], references: [id])
  locationId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trip {
  id          String   @id @default(cuid())
  userId      String
  title       String
  startDate   DateTime
  endDate     DateTime
  destinations String[]
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 